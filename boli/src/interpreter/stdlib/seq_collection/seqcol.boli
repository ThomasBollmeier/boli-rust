(require 'vector)
(require 'list)
(require 'string)
(require 'stream)

(def (count xs)
    (cond 
        [(vector? xs) (vector-count xs)]
        [(list? xs) (list-count xs)]
        [(string? xs) (string-count xs)]
        [#t (error "count function not supported for this type")]))

(def (empty? xs)
    (if (stream? xs)
        #f
        (if (list? xs)
            (nil? xs)
            (= (count xs) 0))))

(def (all? pred? xs)
    (if (empty? xs)
        #t
        (let ([x (head xs)])
            (if (pred? x)
                (all? pred? (tail xs))
                #f))))

(def (any? pred? xs)
    (if (empty? xs)
        #f
        (if (pred? (head xs))
            #t
            (any? pred? (tail xs)))))

(def (empty-col xs)
    (cond 
        [(or (vector? xs) (stream? xs)) (vector)]
        [(list? xs) (list)]
        [(string? xs) ""]
        [#t (error "empty-col function not supported for this type")]))

(def (reverse xs)
    (def (helper xs acc)
        (if (empty? xs)
            acc
            (helper (tail xs) (cons (head xs) acc))))
    (helper xs (empty-col xs)))

(def (drop n xs)
    (cond 
        [(= n 0) xs]
        [(empty? xs) xs]
        [#t (drop (- n 1) (tail xs))]))

(def (drop-while pred? xs)
    (cond 
        [(empty? xs) xs]
        [(pred? (head xs)) (drop-while pred? (tail xs))]
        [#t xs]))

(def (take n xs)
    (def (helper n xs acc)
        (cond 
            [(= n 0) (reverse acc)]
            [(empty? xs) (reverse acc)]
            [#t (helper (- n 1) (tail xs) (cons (head xs) acc))]))
    (helper n xs (empty-col xs)))

(def (take-while pred? xs)
    (def (helper xs acc)
        (cond 
            [(not (pred? (head xs))) (reverse acc)]
            [(empty? xs) (reverse acc)]
            [#t (helper (tail xs) (cons (head xs) acc))]))
    (helper xs (empty-col xs)))