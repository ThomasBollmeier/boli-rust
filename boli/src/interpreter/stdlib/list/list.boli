;; Module with list related functions

(require 'vector)

(def (vec-reverse v)
     (def (helper v acc)
     	  (if (empty? v)
	      acc
	      (helper (vector-tail v)
	      	      (pair-cons (vector-head v) acc))))
     (helper v nil))

(def (list elems...)
     (def (helper elems acc)
     	  (if (nil? elems)
	      	acc
	      	(helper (cdr elems) (pair-cons (car elems) acc))))
     (helper (vec-reverse elems) nil))

(def (vector->list v)
	(list ...v))

(def (list->vector lst)
	(def (helper lst acc)
		(if (nil? lst)
			acc
			(helper (cdr lst) (vector-cons (car lst) acc))))
	(helper (list-reverse lst) (vector)))

(def (list? val)
     (if (pair? val)
     	 (list? (cdr val))
	 (nil? val)))

(def (list-ref lst n)
     (if (nil? lst)
     	 #f
	 (if (= n 0)
	     (car lst)
	     (list-ref (cdr lst) (- n 1)))))

(def (list-set lst n val)
     (def (prepend front back)
     	  (if (nil? front)
	      back
	      (prepend (cdr front)
	      	       (pair-cons (car front) back))))
     (def (set-val lst n acc)
     	  (if (nil? lst)
	      #f
	      (if (= n 0)
	      	  (prepend acc
		  	   (pair-cons val
		  	   	 (cdr lst)))
		  (set-val (cdr lst)
		  	   (- n 1)
			   (pair-cons (car lst)
			   	 acc)))))
     (set-val lst n nil))

(def (list-reverse lst)
     (def (helper lst acc)
     	(if (nil? lst)
	    	acc
	      	(helper (cdr lst)
	      		    (pair-cons (car lst) acc))))
     (helper lst nil))

(def (list-append lst val)
     (list-reverse (pair-cons val (reverse lst))))

(def (list-concat lst1 lst2)
     (def (helper lst1 lst2)
     	  (if (nil? lst1)
	      	lst2
	      	(helper (cdr lst1) (pair-cons (car lst1) lst2))))
     (helper (list-reverse lst1) lst2))

(def (list-filter pred? lst)
     (def (helper lst acc)
     	  (if (nil? lst)
	      	(list-reverse acc)
	      	(let ([elem (car lst)])
	      		(helper (cdr lst)
		   	   	(if (pred? elem)
		       		(pair-cons elem acc)
		       		acc)))))
     (helper lst nil))

(def (list-map f lst)
     (def (helper lst acc)
     	  (if (nil? lst)
	      	(list-reverse acc)
	      	(let ([elem (car lst)])
	      		(helper 
					(cdr lst)
		   	   		(pair-cons (f elem) acc)))))
     (helper lst nil))

(def (list-foldl f init-val lst)
     (def (helper lst acc)
     	  (if (nil? lst)
	      	acc
	      	(helper (cdr lst)
	      		    (f acc (car lst)))))
     (helper lst init-val))

(def (list-foldr f init-val lst)
     (def (helper lst acc)
     	  (if (nil? lst)
	      	acc
	      	(helper (cdr lst)
	      		    (f (car lst) acc))))
     (helper (list-reverse lst) init-val))

(def (list-reduce f lst)
     (if (nil? lst)
     	 (error "Cannot call reduce on empty list")
	 	 (list-foldl f (car lst) (cdr lst))))

(def (list-count lst)
     (list-foldl (Î» (acc el) (+ acc 1)) 0 lst))