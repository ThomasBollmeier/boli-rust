(provide '(merge-sort
	   quick-sort))

(def (split-into-halves lst)
     (let [(n (count lst))]
     	  (if (< n 2)
	      (list lst (empty-col lst))
	      (let [(m (/ n 2))]
	      	   (list (take m lst)
		   	 (drop m lst))))))

(def (merge lst1 lst2 comp-fn)
     (def (helper lst1 lst2 acc)
     	  (cond
			[(empty? lst1) (concat (reverse acc) lst2)]
			[(empty? lst2) (concat (reverse acc) lst1)]
			[#t (let [(x1 (head lst1))
		    		  (x2 (head lst2))]
			 		(if (comp-fn x1 x2)
			     		(helper (tail lst1) lst2 (cons x1 acc))
			     		(helper lst1 (tail lst2) (cons x2 acc))))]))
     (helper lst1 lst2 (empty-col lst1)))

(def (merge-sort lst comp-fn)
     (if (< (count lst) 2)
     	 lst
     	 (let [(halves (split-into-halves lst))
     	       (lst1 (list-ref halves 0))
	           (lst2 (list-ref halves 1))]
	      (merge (merge-sort lst1 comp-fn)
	      	     (merge-sort lst2 comp-fn)
		     comp-fn))))

(def (merge-sort lst)
     (merge-sort lst <))

(def (quick-sort xs comp-fn)
     (let ([n (count xs)])
     	  (if (< n 2)
	      xs
	      (let ([pivot-idx (/ n 2)]
	      	    [parts (partition xs pivot-idx comp-fn)]
		        [left (ref parts 0)]
		        [pivot (ref parts 1)]
		        [right (ref parts 2)])
		   	(concat (quick-sort left comp-fn)
		   	        (cons pivot (empty-col xs))
			        (quick-sort right comp-fn))))))

(def (quick-sort xs)
     (quick-sort xs <))
     
(def (partition xs pivot-idx comp-fn)
     (let ([pivot (ref xs pivot-idx)]
           [left (take pivot-idx xs)]
	       [right (drop (+ pivot-idx 1) xs)]
	       [lt-pivot? (λ (x) (comp-fn x pivot))]
	       [ge-pivot? (λ (x) (not (comp-fn x pivot)))])
	   (list
		(concat (filter lt-pivot? left)
			(filter lt-pivot? right))
		pivot
		(concat (filter ge-pivot? left)
			(filter ge-pivot? right)))))

(def (ref xs i)
     (cond
	[(vector? xs) (vector-ref xs i)]
	[(list? xs) (list-ref xs i)]
	[#t (error "ref requires vector or list as first argument")]))