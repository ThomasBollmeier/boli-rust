(provide '(string-split
	   string-reverse
	   string-ltrim
	   string-rtrim
	   string-trim
	   string-starts-with?
	   string-join))

(def WHITESPACE (create-set " " "\t" "\r" "\n"))

(def (cons-if-not-empty curr acc)
     (if (not (empty? curr))
     	 (cons curr acc)
	 acc))

(def (string-split s chars)
     (def (loop s curr acc)
     	  (if (empty? s)
	      (reverse (cons-if-not-empty curr acc))
	      (let ([ch (head s)]
	      	    [rest (tail s)])
		   (if (set-contains? chars ch)
		       (loop rest "" (cons-if-not-empty curr acc))
		       (loop rest (string-concat curr ch) acc)))))
     (loop s "" (vector)))

(def (string-split s)
     (string-split s WHITESPACE))

(def (list->string xs)
	(def (helper xs s)
		(if (empty? xs)
			s
			(helper (tail xs) (string-concat s (head xs)))))
	(helper xs ""))

(def (string-reverse s)
	(def (helper s acc)
		(if (empty? s)
			(list->string acc)
			(helper (tail s) (cons (head s) acc))))
	(helper s (list)))

(def (string-ltrim s chars)
	(let ([cs (string->list s)]
		  [trimmed (drop-while (Î» (c) (set-contains? chars c)) cs)])
		(list->string trimmed)))

(def (string-ltrim s)
     (string-ltrim s WHITESPACE))

(def (string-rtrim s chars)
	(string-reverse (string-ltrim (string-reverse s) chars)))

(def (string-rtrim s)
     (string-rtrim s WHITESPACE))

(def (string-trim s chars)
	(string-ltrim (string-rtrim s chars) chars))

(def (string-trim s)
     (string-trim s WHITESPACE))

(def (string-starts-with? s prefix)
     (cond
	[(empty? prefix) #t]
	[(empty? s) #f]
	[#t (let ([c1 (head s)]
	    	  [c2 (head prefix)])
		 (if (equal? c1 c2)
		     (string-starts-with? (tail s) (tail prefix))
		     #f))]))

(def (string-join strings sep)
     (def (helper strs result)
     	  (if (empty? strs)
	      result
	      (let ([s (head strs)])
	      	   (if (not (empty? result))
		       (helper (tail strs)
		       	       (string-concat result sep s))
		       (helper (tail strs)
		       	       s)))))
     (helper strings ""))